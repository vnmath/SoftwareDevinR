#'
#' @param locationtoclean A data frame with raw data obtained from NOAA website
#'
#' @return A data frame with cleaned LOCATION_NAME column
#'
#' @details After downloading and reading in the dataset from NOAA site,
#' \url{https://www.ngdc.noaa.gov/nndc/struts/form?t=101650&s=1&d=1}.
#' National Geophysical Data Center / World Data Service (NGDC/WDS): Significant Earthquake Database.
#' National Geophysical Data Center, NOAA. doi:10.7289/V5TD9V7K
#' The function cleans the LOCATION_NAME column by stripping out the country name (including the colon)
#' and converts names to title case (as opposed to all caps).
#'
#' @examples
#' \dontrun{
#' library(readr)
#' data <- readr::read_delim("signif.txt", delim = "\t")
#' data <- eq_location_clean(data)
#' }
#'
#' @importFrom dplyr %>% mutate
#'
#' @export
eq_location_clean <- function(locationtoclean) {
location_clean <- locationtoclean %>%
dplyr::mutate(LOCATION_NAME=gsub("^.*:"," ",LOCATION_NAME)) %>%
dplyr::mutate(LOCATION_NAME=gsub("\\b([[:alpha:]])([[:alpha:]]+)", "\\U\\1\\L\\2" ,LOCATION_NAME, perl=TRUE))
location_clean
}
source('C:/Users/erlarned/Desktop/SoftwareDevinR/R/eq_clean_data.R')
library(SoftwareDevinR)
library(SoftwareDevinR)
filename <- system.file("data", "signif.txt", package="EQVT")
data <- readr::read_delim(filename, delim = '\t')
clean_data <- eq_clean_data(data)
#' Testting eq_clean_data function
testthat::expect_that(clean_data$DATE, testthat::is_a('Date'))
testthat::expect_that(clean_data$LATITUDE, testthat::is_a('numeric'))
testthat::expect_that(clean_data$LONGITUDE, testthat::is_a('numeric'))
testthat::expect_that(clean_data$EQ_PRIMARY, testthat::is_a('numeric'))
testthat::expect_that(clean_data$TOTAL_DEATHS, testthat::is_a('numeric'))
#' Testing eq_location_clean function
clean_data <- eq_location_clean(clean_data)
testthat::expect_that(clean_data,testthat::is_a('data.frame'))
testthat::expect_that('LOCATION_NAME' %in% (colnames(clean_data)), testthat::is_true())
#' Testing eq_map function
testthat::expect_that(clean_data %>%
dplyr::filter(COUNTRY == 'MEXICO' & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = 'DATE'), testthat::is_a('leaflet'))
#' Testing eq_create_label function
testthat::expect_that(eq_create_label(clean_data), testthat::is_a('character'))
testthat::expect_that(clean_data %>%
dplyr::filter(COUNTRY == 'MEXICO' & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = 'popup_text'), testthat::is_a('leaflet'))
library(testthat)
library(SoftwareDevinR)
test_check("SoftwareDevinR")
library(testthat)
library(SoftwareDevinR)
test_check("SoftwareDevinR")
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
use_travis()
library(devtools)
use_travis()
version
#' This maps the epicenters (LATITUDE/LONGITUDE) and annotates each point with in
#' pop up window containing annotation data stored in a column of the data frame
#'
#' @param mapdata A data frame with data obtained from NOAA website
#' @param annot_col The name of the column from the data to be use for annotation
#'
#' @return A map of the earthquakes epicenters and giving some annotations
#'
#' @details After downloading, reading and cleaning the dataset from NOAA site,
#' \url{https://www.ngdc.noaa.gov/nndc/struts/form?t=101650&s=1&d=1}.
#' National Geophysical Data Center / World Data Service (NGDC/WDS): Significant Earthquake Database.
#' National Geophysical Data Center, NOAA.
#' The cleaning of the data frame is done with the eq_clean_data() function of this package.
#' The function return a map of the earthquakes epicenters (LATITUDE/LONGITUDE) and annotates each point with
#' in pop up window containing annotation data stored in a column of the cleaned data frame.
#' The user is able to choose which column is used for the annotation in the pop-up with this function
#' by using the argument named "annot_col". If the "annot_col" argument is not used, then the value of the "DATE" column is used.
#' On the map, each earthquake is shown with a circle, and the radius of the circle
#' is proportional to the earthquake's magnitude (EQ_PRIMARY).
#'
#' @examples
#' \dontrun{
#' readr::read_delim("signif.txt", delim = "\t") %>%
#' eq_clean_data() %>%
#'   dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
#'   eq_map(annot_col = "DATE")
#' }
#'
#' @importFrom dplyr %>%
#' @importFrom leaflet leaflet addTiles addCircleMarkers
#'
#' @export
eq_map <- function(mapdata, annot_col = "DATE") {
leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addCircleMarkers(lng = mapdata$LONGITUDE, lat = mapdata$LATITUDE,
radius = as.numeric(mapdata$EQ_PRIMARY), popup = mapdata[[annot_col]],
stroke = FALSE, fillOpacity = 0.5)
}
#' Create a function called eq_create_label() that takes the dataset
#' as an argument and creates an HTML label that can be used as
#' the annotation text in the leaflet map.
#' @param mapdata A cleaned data frame with data obtained from NOAA website
#'
#' @return An HTML label that can be used as the annotation text in the leaflet map.
#'
#' @details This function should put together a character string for
#' each earthquake that will show the cleaned location (as cleaned by
#' the eq_location_clean() function created in Module 1),
#' the magnitude (EQ_PRIMARY), and the total number of deaths (TOTAL_DEATHS),
#'  with boldface labels for each ("Location", "Total deaths", and "Magnitude").
#'  If an earthquake is missing values for any of these,
#' both the label and the value should be skipped for that element of the tag.
#'
#' @examples
#' \dontrun{
#' readr::read_delim("signif.txt", delim = "\t") %>%
#'   eq_clean_data() %>%
#'   eq_location_clean() %>%
#'   dplyr::filter(COUNTRY == "CANADA" & lubridate::year(DATE) >= 2000) %>%
#'   dplyr::mutate(popup_text = eq_create_label(.)) %>%
#'   eq_map(annot_col = "popup_text")
#' }
#'
#' @export
eq_create_label <- function(mapdata){
paste(ifelse(is.na(mapdata$LOCATION_NAME),"", paste("<b>Location: </b>",mapdata$LOCATION_NAME,"<br/>")),
ifelse(is.na(mapdata$EQ_PRIMARY),"", paste("<b>Magnitude: </b>",mapdata$EQ_PRIMARY,"<br/>")),
ifelse(is.na(mapdata$TOTAL_DEATHS),"", paste("<b>Total deaths: </b>",mapdata$TOTAL_DEATHS,"<br/>")))
}
utils::globalVariables(c("LOCATION_NAME","I_D","YEAR","MONTH","DAY","LATITUDE","LONGITUDE",
"EQ_PRIMARY","COUNTRY","STATE","TOTAL_DEATHS","DATE","YEAR4"))
#' Module1: Cleaning NOAA earthquake data
#'
#' @param datatoclean A data frame with raw data obtained from NOAA website
#'
#' @return A data frame with cleaned date, latitude and longitude numerical columns
#'
#' @details The function returns a date column created by uniting the year, month, day and
#' converting it to the Date class
#' @examples
#' \dontrun{
#' data <- readr::read_delim("signif.txt", delim = "\t")
#' data <- eq_clean_data(data)
#' }
#'
#' @importFrom dplyr %>% mutate select if_else
#' @importFrom tidyr unite
#' @importFrom lubridate year ymd
#'
#' @export
eq_clean_data <- function(datatoclean) {
clean_data <- datatoclean %>%
dplyr::select(I_D, YEAR, MONTH, DAY, LATITUDE, LONGITUDE, LOCATION_NAME, EQ_PRIMARY, COUNTRY, STATE, TOTAL_DEATHS) %>%
dplyr::mutate(YEAR4=sprintf("%04d",as.numeric(gsub('-','',YEAR)))) %>%
dplyr::mutate(MONTH=dplyr::if_else(is.na(MONTH),'01',sprintf("%02d", MONTH))) %>%
dplyr::mutate(DAY=dplyr::if_else(is.na(DAY),'01',sprintf("%02d", DAY))) %>%
tidyr::unite(DATE,YEAR4,MONTH,DAY,sep='-',remove = FALSE) %>%
dplyr::mutate(DATE = lubridate::ymd(DATE)) %>%
dplyr::select(-YEAR4)
lubridate::year(clean_data$DATE) <- clean_data$YEAR
clean_data <- clean_data %>%
dplyr::mutate(LATITUDE = as.numeric(LATITUDE),LONGITUDE = as.numeric(LONGITUDE),
EQ_PRIMARY = as.numeric(EQ_PRIMARY), TOTAL_DEATHS = as.numeric(TOTAL_DEATHS))
clean_data
}
#' Cleaning NOAA earthquake data location values
#'
#' @param locationtoclean A data frame with raw data obtained from NOAA website
#'
#' @return A data frame with cleaned LOCATION_NAME column
#'
#' @details The function cleans the LOCATION_NAME column
#'
#' @examples
#' \dontrun{
#' library(readr)
#' data <- readr::read_delim("signif.txt", delim = "\t")
#' data <- eq_location_clean(data)
#' }
#'
#' @importFrom dplyr %>% mutate
#'
#' @export
eq_location_clean <- function(locationtoclean) {
location_clean <- locationtoclean %>%
dplyr::mutate(LOCATION_NAME=gsub("^.*:"," ",LOCATION_NAME)) %>%
dplyr::mutate(LOCATION_NAME=gsub("\\b([[:alpha:]])([[:alpha:]]+)", "\\U\\1\\L\\2" ,LOCATION_NAME, perl=TRUE))
location_clean
}
#' Module 2: Visualize the times at which earthquakes occur within certain countries
#'
#' @return Produce a time line plot of selected earthquakes.
#'
#' @details The data to be used with this geom from NOAA website
#'
#' @inheritParams ggplot2::layer
#' @param mapping Create asthetics mapping.
#' @param data  The data
#' @param stat  The statistical transformation as a string.
#' @param position Position adjustment
#' @param show.legend show the legends or not
#' @param inherit.aes the default aesthetics
#'
#' @param na.rm If `FALSE`, the default, missing values are removed with
#'   a warning. If `TRUE`, missing values are silently removed.
#' @param ... Other arguments passed on to [layer()]. These are
#'   often aesthetics, used to set an aesthetic to a fixed value, like
#'   `colour = "red"` or `size = 3`. They may also be parameters
#'   to the paired geom/stat.
#'
#'#' @section Aesthetics:
#' \code{geom_timeline} understands the following aesthetics
#'
#' \itemize{
#'   \item \strong{\code{x}} # Time variable
#'   \item \code{y}          # Factor indicating some stratification
#'   \item \code{color}      # Color of border of elements
#'   \item \code{shape}      # Shape
#'   \item \code{size}       # Size
#'   \item \code{alpha}      # Transparency (1: opaque; 0: transparent)
#'   \item \code{fill}       # Color of inside of elements
#'   \item \code{stroke}     # Stroke
#' }
#'
#' @importFrom ggplot2 layer
#'
#' @export
#'
#' @examples
#' # The data must be cleaned using the function \code{eq_clean_data}, included in the package.
#' # Aesthetics can be specified in the \code{ggplot} function or in \code{geom_timeline} geom function
#' \dontrun{
#' data <- readr::read_delim("signif.txt", delim = "\t")
#' data <- eq_clean_data(data)
#' data %>%
#' dplyr::filter(COUNTRY == c("MEXICO","USA") & lubridate::year(DATE) >= 2010) %>%
#' ggplot(aes(x=DATE,y=COUNTRY,color=TOTAL_DEATHS,size=EQ_PRIMARY)) +
#' geom_timeline(alpha=.5) +
#' theme(legend.position="bottom", legend.box="horizontal", plot.title=element_text(hjust=0.5)) +
#' ggtitle("Earthquakes Visualization Tool") +
#' labs(size = "Richter scale value", color = "# deaths")
#' }
geom_timeline <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
ggplot2::layer(
geom = GeomTimeline, mapping = mapping,  data = data, stat = stat,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
#' GeomTimeline
#'
#' GeomTimeline Geom coding
#'
#' @importFrom ggplot2 ggproto Geom aes draw_key_point
#' @importFrom grid segmentsGrob gpar pointsGrob gList
#'
#' @export
GeomTimeline <- ggplot2::ggproto("GeomTimeline", ggplot2::Geom,
required_aes = "x",
default_aes = ggplot2::aes(y=0, colour="black", shape=19, size=1, stroke = 0.5, alpha = 0.5, fill = NA),
draw_key = ggplot2::draw_key_point,
draw_panel = function(data, panel_params, coord) {
coords <- coord$transform(data, panel_params)
grid::gList(
grid::pointsGrob(
coords$x, coords$y,
pch = coords$shape,
gp = grid::gpar(col = alpha(coords$colour, coords$alpha),
fill = alpha(coords$fill, coords$alpha),
fontsize = coords$size * .pt + coords$stroke * .stroke / 2,
lwd = coords$stroke * .stroke / 2)
),
grid::segmentsGrob(
x0 = min(coords$x), y0 = coords$y, x1 = max(coords$x), y1 = coords$y,
gp = grid::gpar(col = "black", lwd = 1)
)
)
}
)
#' Module 2: Visualization Tools: Visualize the times at which earthquakes occur within certain countries
#'This geom adds a vertical line to each data point with a text annotation
#'(e.g. the location of the earthquake) attached to each line. There should be an option
#'to subset to n_max number of earthquakes, where we take the n_max largest (by magnitude) earthquakes.
#'Aesthetics are x, which is the date of the earthquake
#'and label which takes the column name from which annotations will be obtained.
#' @return The geom \code{geom_timeline_label} used with the \code{ggplot} function
#' and the \code{geom_timeline} geom, add annotations to the n_max largest (by magnitude) earthquakes.
#'
#' @details The data downloaded and readed from
#' \url{https://www.ngdc.noaa.gov/nndc/struts/form?t=101650&s=1&d=1}.
#'
#' @inheritParams ggplot2::layer
#' @param mapping The mappings created.
#' @param data  The data need to display in this layer.
#' @param stat  The statistical transformation to use on the data for this layer.
#' @param position Position adjustment
#' @param show.legend logical. This layer be included in the legends or not
#' @param inherit.aes Override the default aesthetic if false
#' @param na.rm Missing values are removed with if false
#' @param ... Other arguments passed on to [layer()].
#'
#' \code{geom_timeline_label} understands the following aesthetics
#' \itemize{
#'   \item \strong{\code{x}}     # Time variable
#'   \item \strong{\code{label}} # Annotations to the earthquake data
#'   \item \code{y}              # Stratification
#'   \item \code{n_max}          # number of earthquakes of subset corresponding to their magnitude (EQ_PRIMARY)
#'   \item \code{y_length}       # vertical line length to each data point
#' }
#'
#' @importFrom ggplot2 layer
#'
#' @export
#'
#' @examples
#' # The data must be cleaned using the function \code{eq_clean_data}, included in the package.
#' # The LOCATION_NAME colomn of the data must be cleaned using the function \code{eq_location_clean},
#' # included in the package.
#' # Aesthetics can be specified in the \code{ggplot} function or in \code{geom_timeline} geom function
#' \dontrun{
#' data <- readr::read_delim("signif.txt", delim = "\t")
#' data <- eq_clean_data(data)
#' data <- eq_location_clean(data)
#' data %>%
#' dplyr::filter(COUNTRY == c("CANADA","USA") & lubridate::year(DATE) >= 2010) %>%
#' ggplot(aes(x=DATE,y=COUNTRY,color=TOTAL_DEATHS,size=EQ_PRIMARY)) +
#' geom_timeline(alpha=.5) +
#' geom_timelinelabel(aes(label=LOCATION_NAME),n_max=5) +
#' theme(legend.position="bottom", legend.box="horizontal", plot.title=element_text(hjust=0.5)) +
#' ggtitle("Earthquakes Visualization") +
#' labs(size = "Richter scale", color = "# deaths")
#' }
geom_timelinelabel <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
ggplot2::layer(
geom = GeomTimelinelabel, mapping = mapping,  data = data, stat = stat,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
#' GeomTimelinelabel
#'
#' GeomTimelinelabel Geom coding
#'
#' @importFrom ggplot2 ggproto Geom aes draw_key_point
#' @importFrom grid segmentsGrob gpar textGrob gList
#' @importFrom dplyr slice arrange_ group_by_ %>%
#'
#' @export
GeomTimelinelabel <- ggplot2::ggproto("GeomTimelinelabel", ggplot2::Geom,
required_aes = c("x","label"),
default_aes = ggplot2::aes(y=0, n_max=0, y_length=1),
draw_key = ggplot2::draw_key_point,
draw_panel = function(data, panel_params, coord) {
if (data$n_max[1]>0){
if (data$y[1]==0){
data<- data %>%
dplyr::arrange_(~ desc(size)) %>%
dplyr::slice(1:data$n_max[1])
}
else {
data<- data %>%
dplyr::arrange_(~ desc(size)) %>%
dplyr::group_by_(~ y) %>%
dplyr::slice(1:data$n_max[1])
}
}
if (!data$y[1]==0){
data$y_length<-dim(table(data$y))
}
coords <- coord$transform(data, panel_params)
grid::gList(
grid::segmentsGrob(
x0 = coords$x, y0 = coords$y, x1 = coords$x, y1 = (.2/coords$y_length)+coords$y,
gp = grid::gpar(col = "black", lwd = .5)
),
grid::textGrob(
label = coords$label,
x = coords$x, y = (.2/coords$y_length)+coords$y , just = "left", rot = 45
)
)
}
)
#' Module 2: Visualization Tools: Visualize the times at which earthquakes occur within certain countries
#'This geom adds a vertical line to each data point with a text annotation
#'(e.g. the location of the earthquake) attached to each line. There should be an option
#'to subset to n_max number of earthquakes, where we take the n_max largest (by magnitude) earthquakes.
#'Aesthetics are x, which is the date of the earthquake
#'and label which takes the column name from which annotations will be obtained.
#' @return The geom \code{geom_timeline_label} used with the \code{ggplot} function
#' and the \code{geom_timeline} geom, add annotations to the n_max largest (by magnitude) earthquakes.
#'
#' @details The data downloaded and readed from
#' \url{https://www.ngdc.noaa.gov/nndc/struts/form?t=101650&s=1&d=1}.
#'
#' @inheritParams ggplot2::layer
#' @param mapping The mappings created.
#' @param data  The data need to display in this layer.
#' @param stat  The statistical transformation to use on the data for this layer.
#' @param position Position adjustment
#' @param show.legend logical. This layer be included in the legends or not
#' @param inherit.aes Override the default aesthetic if false
#' @param na.rm Missing values are removed with if false
#' @param ... Other arguments passed on to [layer()].
#'
#' \code{geom_timeline_label} understands the following aesthetics
#' \itemize{
#'   \item \strong{\code{x}}     # Time variable
#'   \item \strong{\code{label}} # Annotations to the earthquake data
#'   \item \code{y}              # Stratification
#'   \item \code{n_max}          # number of earthquakes of subset corresponding to their magnitude (EQ_PRIMARY)
#'   \item \code{y_length}       # vertical line length to each data point
#' }
#'
#' @importFrom ggplot2 layer
#'
#' @export
#'
#' @examples
#' # The data must be cleaned using the function \code{eq_clean_data}, included in the package.
#' # The LOCATION_NAME colomn of the data must be cleaned using the function \code{eq_location_clean},
#' # included in the package.
#' # Aesthetics can be specified in the \code{ggplot} function or in \code{geom_timeline} geom function
#' \dontrun{
#' data <- readr::read_delim("signif.txt", delim = "\t")
#' data <- eq_clean_data(data)
#' data <- eq_location_clean(data)
#' data %>%
#' dplyr::filter(COUNTRY == c("CANADA","USA") & lubridate::year(DATE) >= 2010) %>%
#' ggplot(aes(x=DATE,y=COUNTRY,color=TOTAL_DEATHS,size=EQ_PRIMARY)) +
#' geom_timeline(alpha=.5) +
#' geom_timelinelabel(aes(label=LOCATION_NAME),n_max=5) +
#' theme(legend.position="bottom", legend.box="horizontal", plot.title=element_text(hjust=0.5)) +
#' ggtitle("Earthquakes Visualization") +
#' labs(size = "Richter scale", color = "# deaths")
#' }
geom_timelinelabel <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
ggplot2::layer(
geom = GeomTimelinelabel, mapping = mapping,  data = data, stat = stat,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
#' GeomTimelinelabel
#'
#' GeomTimelinelabel Geom coding
#'
#' @importFrom ggplot2 ggproto Geom aes draw_key_point
#' @importFrom grid segmentsGrob gpar textGrob gList
#' @importFrom dplyr slice arrange_ group_by_ %>%
#'
#' @export
GeomTimelinelabel <- ggplot2::ggproto("GeomTimelinelabel", ggplot2::Geom,
required_aes = c("x","label"),
default_aes = ggplot2::aes(y=0, n_max=0, y_length=1),
draw_key = ggplot2::draw_key_point,
draw_panel = function(data, panel_params, coord) {
if (data$n_max[1]>0){
if (data$y[1]==0){
data<- data %>%
dplyr::arrange_(~ desc(size)) %>%
dplyr::slice(1:data$n_max[1])
}
else {
data<- data %>%
dplyr::arrange_(~ desc(size)) %>%
dplyr::group_by_(~ y) %>%
dplyr::slice(1:data$n_max[1])
}
}
if (!data$y[1]==0){
data$y_length<-dim(table(data$y))
}
coords <- coord$transform(data, panel_params)
grid::gList(
grid::segmentsGrob(
x0 = coords$x, y0 = coords$y, x1 = coords$x, y1 = (.2/coords$y_length)+coords$y,
gp = grid::gpar(col = "black", lwd = .5)
),
grid::textGrob(
label = coords$label,
x = coords$x, y = (.2/coords$y_length)+coords$y , just = "left", rot = 45
)
)
}
)
use_travis()
library(devtools)
use_travis()
