install.packages("leaflet")
###############################################################################
if(getRversion() >= '2.15.1')
utils::globalVariables(c("LOCATION_NAME","I_D","YEAR","MONTH","DAY","LATITUDE","LONGITUDE",
"EQ_PRIMARY","COUNTRY","STATE","TOTAL_DEATHS","DATE","YEAR4"))
#' Module 1: Obtain and Clean the NOAA earthquake data
#'
#' @param datatoclean A data frame with raw data obtained from NOAA website
#'
#' @return A data frame with cleaned date, latitude and longitude numerical columns
#'
#' @details After downloading and reading in the dataset from NOAA site,
#' \url{https://www.ngdc.noaa.gov/nndc/struts/form?t=101650&s=1&d=1}.
#' National Geophysical Data Center / World Data Service (NGDC/WDS): Significant Earthquake Database.
#' National Geophysical Data Center, NOAA. doi:10.7289/V5TD9V7K
#' The function returns a date column created by uniting the year, month, day and
#' converting it to the Date class and also converts LATITUDE and LONGITUDE columns
#' to numeric class.
#'
#' @examples
#' \dontrun{
#' data <- readr::read_delim("signif.txt", delim = "\t")
#' data <- eq_clean_data(data)
#' }
#'
#' @importFrom dplyr %>% mutate select if_else
#' @importFrom tidyr unite
#' @importFrom lubridate year ymd
#'
#' @export
eq_clean_data <- function(datatoclean) {
clean_data <- datatoclean %>%
dplyr::select(I_D, YEAR, MONTH, DAY, LATITUDE, LONGITUDE, LOCATION_NAME, EQ_PRIMARY, COUNTRY, STATE, TOTAL_DEATHS) %>%
dplyr::mutate(YEAR4=sprintf("%04d",as.numeric(gsub('-','',YEAR)))) %>%
dplyr::mutate(MONTH=dplyr::if_else(is.na(MONTH),'01',sprintf("%02d", MONTH))) %>%
dplyr::mutate(DAY=dplyr::if_else(is.na(DAY),'01',sprintf("%02d", DAY))) %>%
tidyr::unite(DATE,YEAR4,MONTH,DAY,sep='-',remove = FALSE) %>%
dplyr::mutate(DATE = lubridate::ymd(DATE)) %>%
dplyr::select(-YEAR4)
lubridate::year(clean_data$DATE) <- clean_data$YEAR
clean_data <- clean_data %>%
dplyr::mutate(LATITUDE = as.numeric(LATITUDE),LONGITUDE = as.numeric(LONGITUDE),
EQ_PRIMARY = as.numeric(EQ_PRIMARY), TOTAL_DEATHS = as.numeric(TOTAL_DEATHS))
clean_data
}
#' Cleaning NOAA earthquake data location values
#'
#' @param locationtoclean A data frame with raw data obtained from NOAA website
#'
#' @return A data frame with cleaned LOCATION_NAME column
#'
#' @details After downloading and reading in the dataset from NOAA site,
#' \url{https://www.ngdc.noaa.gov/nndc/struts/form?t=101650&s=1&d=1}.
#' National Geophysical Data Center / World Data Service (NGDC/WDS): Significant Earthquake Database.
#' National Geophysical Data Center, NOAA. doi:10.7289/V5TD9V7K
#' The function cleans the LOCATION_NAME column by stripping out the country name (including the colon)
#' and converts names to title case (as opposed to all caps).
#'
#' @examples
#' \dontrun{
#' library(readr)
#' data <- readr::read_delim("signif.txt", delim = "\t")
#' data <- eq_location_clean(data)
#' }
#'
#' @importFrom dplyr %>% mutate
#'
#' @export
eq_location_clean <- function(locationtoclean) {
location_clean <- locationtoclean %>%
dplyr::mutate(LOCATION_NAME=gsub("^.*:"," ",LOCATION_NAME)) %>%
dplyr::mutate(LOCATION_NAME=gsub("\\b([[:alpha:]])([[:alpha:]]+)", "\\U\\1\\L\\2" ,LOCATION_NAME, perl=TRUE))
location_clean
}
source('C:/Users/erlarned/Desktop/SoftwareDevinR/R/eq_clean_data.R')
library(SoftwareDevinR)
library(SoftwareDevinR)
filename <- system.file("data", "signif.txt", package="EQVT")
data <- readr::read_delim(filename, delim = '\t')
clean_data <- eq_clean_data(data)
#' Testting eq_clean_data function
testthat::expect_that(clean_data$DATE, testthat::is_a('Date'))
testthat::expect_that(clean_data$LATITUDE, testthat::is_a('numeric'))
testthat::expect_that(clean_data$LONGITUDE, testthat::is_a('numeric'))
testthat::expect_that(clean_data$EQ_PRIMARY, testthat::is_a('numeric'))
testthat::expect_that(clean_data$TOTAL_DEATHS, testthat::is_a('numeric'))
#' Testing eq_location_clean function
clean_data <- eq_location_clean(clean_data)
testthat::expect_that(clean_data,testthat::is_a('data.frame'))
testthat::expect_that('LOCATION_NAME' %in% (colnames(clean_data)), testthat::is_true())
#' Testing eq_map function
testthat::expect_that(clean_data %>%
dplyr::filter(COUNTRY == 'MEXICO' & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = 'DATE'), testthat::is_a('leaflet'))
#' Testing eq_create_label function
testthat::expect_that(eq_create_label(clean_data), testthat::is_a('character'))
testthat::expect_that(clean_data %>%
dplyr::filter(COUNTRY == 'MEXICO' & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = 'popup_text'), testthat::is_a('leaflet'))
library(testthat)
library(SoftwareDevinR)
test_check("SoftwareDevinR")
library(testthat)
library(SoftwareDevinR)
test_check("SoftwareDevinR")
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
